{"version":3,"sources":["Form.js","TaskList.js","Header.js","App.js","serviceWorker.js","index.js"],"names":["initialTask","no","title","detail","due","category","importance","status","DivFlexColumn","styled","div","Form","FormRow","Importance","ImportanceVar","input","Submit","FormArea","props","addTaskList","useState","newTask","setNewTask","console","log","handleChange","event","target","name","value","task","htmlFor","type","id","onChange","onClick","Cards","tasks","doneTask","doneList","useMemo","filter","data","sort","a","b","aDue","toString","bDue","aIm","bIm","deleteTaskbyEnter","e","key","Number","map","Card","tabIndex","onKeyPress","DivFlex","Category","Due","Title","Detail","TaskList","H1","h1","Header","Div","App","setTasks","Object","assign","length","concat","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.863da668.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nconst UNDO = 0;\nconst DONE = 1;\n\nconst initialTask = {\n  no: null,\n  title: \"\",\n  detail: \"\",\n  due: \"\",\n  category: \"\",\n  importance: 50,\n  status: UNDO,\n};\n\nconst FormArea = (props) => {\n  const { addTaskList } = props;\n\n  const [newTask, setNewTask] = useState(initialTask);\n\n  const submitTask = () => {\n    if (newTask.due === \"\" || !newTask.importance  === \"\" || !newTask.title  === \"\") {\n      return;\n    }\n    addTaskList(newTask);\n    setNewTask(initialTask);\n  };\n\n  console.log(newTask);\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    let task = {...newTask}\n    task[name] = value;\n    setNewTask(task);\n  };\n\n  const { category, title, detail, due, importance } = newTask;\n\n  return (\n    <Form>\n      <form>\n        <FormRow>\n          <label htmlFor=\"category\">Category : </label>\n          <input\n            type=\"text\"\n            id=\"category\"\n            name=\"category\"\n            value={category}\n            onChange={handleChange}\n          ></input>\n        </FormRow>\n        <FormRow>\n          <label htmlFor=\"title\">Title : </label>\n          <input\n            type=\"text\"\n            id=\"title\"\n            name=\"title\"\n            value={title}\n            onChange={handleChange}\n          ></input>\n        </FormRow>\n        <FormRow>\n          <label htmlFor=\"detail\">Detail : </label>\n          <input\n            type=\"text\"\n            id=\"detail\"\n            name=\"detail\"\n            value={detail}\n            onChange={handleChange}\n          ></input>\n        </FormRow>\n        <FormRow>\n          <label htmlFor=\"due\">Due : </label>\n          <input\n            type=\"date\"\n            id=\"due\"\n            name=\"due\"\n            value={due}\n            onChange={handleChange}\n          ></input>\n        </FormRow>\n        <FormRow>\n          <label htmlFor=\"importance\">Importance : </label>\n          <Importance>\n            low\n            <ImportanceVar\n              type=\"range\"\n              id=\"importance\"\n              name=\"importance\"\n              value={importance}\n              onChange={handleChange}\n            />\n            heigh\n          </Importance>\n        </FormRow>\n        <FormRow>\n          <Submit type=\"button\" value=\"Submit\" onClick={submitTask} />\n        </FormRow>\n      </form>\n    </Form>\n  );\n};\n\nconst DivFlexColumn = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 8px 4px;\n`;\n\nconst Form = styled(DivFlexColumn)`\n  border: 1px solid #ddd;\n  width: 300px;\n  margin: 8px auto;\n`;\n\nconst FormRow = styled(DivFlexColumn)`\n  flex-content: space-between;\n`;\n\nconst Importance = styled.div`\n  text-align: center;\n  font-size: 0.9em;\n  margin: 4px 0;\n`;\nconst ImportanceVar = styled.input`\n  width: 200px;\n  vertical-align: text-top;\n`;\n\nconst Submit = styled.input`\n  padding: 4px 8px;\n  width: 100%;\n  border: 1px solid #CCC;\n  font-size: .8em;\n  font-weight: 800;\n  color: #444;\n`;\n\nexport default FormArea;\n\n// const [title, setTitle] = useState();\n// const [detail, setDetail] = useState();\n// const [due, setDue] = useState();\n// const [category, setCategory] = useState();\n// const [importance, setImportance] = useState();\n\n// const submitTask = () => {\n//   addTaskList({\n//     'title': title,\n//     'detail': detail,\n//     'due': due,\n//     'category': category,\n//     'importance': importance,\n//     status: UNDO,\n//     level: null,\n//   });\n// };\n\n// const handleChange = event => {\n//   const { name, value } = event.target;\n//   switch (name) {\n//     case \"title\":\n//       setTitle(value);\n//       break;\n//     case \"detail\":\n//       setDetail(value);\n//       break;\n//     case \"due\":\n//       setDue(value);\n//       break;\n//     case \"category\":\n//       setCategory(value);\n//       break;\n//     case \"importance\":\n//       setImportance(value);\n//       break;\n//     default:\n//       return;\n//   }\n// }\n","import React, { useState, useMemo } from \"react\";\nimport styled from \"styled-components\";\n\nconst UNDO = 0;\nconst DONE = 1;\n\nconst Cards = (props) => {\n  const { tasks, doneTask } = props;\n\n  const doneList = useMemo(() => tasks\n    .filter(data => data.status !== DONE)\n    .sort((a, b) => {\n      const aDue = a.due.toString();\n      const bDue = b.due.toString();\n      const aIm = a.importance.toString();\n      const bIm = b.importance.toString();\n      if (aDue < bDue) {\n        return -1;\n      }\n      if (aDue > bDue) {\n        return 1;\n      }\n      if (aIm > bIm) {\n        return -1;\n      }\n      if (aIm < bIm) {\n        return 1;\n      }\n      return 0;\n    }), [tasks]\n    );\n\n\n  const deleteTaskbyEnter = (e) => {\n    if (e.key === \"Enter\") {\n      const { id } = e.target;\n      doneTask(Number(id));\n    }\n  };\n\n  const cards = doneList.map((data) => {\n    return (\n      <Card\n        tabIndex={0}\n        key={data.no}\n        onClick={() => doneTask(data.no)}\n        onKeyPress={deleteTaskbyEnter}\n      >\n        <DivFlex>\n          <Category>{data.category}</Category>\n          <Due>Due: {data.due}</Due>\n        </DivFlex>\n\n        <Title>{data.title}</Title>\n        <Detail>{data.detail}</Detail>\n      </Card>\n    );\n  });\n  return cards;\n};\n\nconst TaskList = (props) => {\n  const { tasks, doneTask } = props;\n  return (\n    <DivFlexColumn>\n      <Cards tasks={tasks} doneTask={doneTask} />\n    </DivFlexColumn>\n  );\n};\n\nconst DivFlex = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst Category = styled.div`\n  color: #666;\n  font-size: 0.8em;\n  padding: 4px 8px;\n`;\n\nconst Due = styled.div`\n  font-size: 0.8em;\n  color: #751b08;\n  padding: 4px 8px;\n`;\n\nconst Title = styled.div`\n  font-wieght: 800;\n  font-size: 1.1em;\n  background: #ddd;\n  padding: 4px 8px;\n`;\n\nconst Detail = styled.div`\n  color: #444;\n  font-size: 0.9em;\n  padding: 4px 8px;\n  height: 50px;\n`;\n\nconst DivFlexColumn = styled(DivFlex)`\n  flex-direction: column;\n  padding: 8px 4px;\n`;\n\nconst Card = styled(DivFlexColumn)`\n  border: 1px solid #ddd;\n  width: 300px;\n  margin: 8px auto;\n  padding: 0;\n`;\n\nexport default TaskList;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nconst Header = () => {\n  return <H1>- Task List -</H1>;\n};\n\nconst H1 = styled.h1`\n  padding: 8px 4px;\n  font-size: 1.4em;\n  text-align: center;\n`;\n\nexport default Header;\n","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport FormArea from \"./Form\";\nimport TaskList from \"./TaskList\";\nimport Header from \"./Header\";\n\nconst UNDO = 0;\nconst DONE = 1;\n\nfunction App() {\n  const [tasks, setTasks] = useState([]);\n\n  const addTaskList = (newTask) => {\n    const task = Object.assign({}, newTask);\n    task.no = tasks.length;\n    setTasks(tasks.concat(task));\n  };\n\n  // const doneTask = (no) => {\n  //   const doneList = tasks.map((data) => {\n  //     if (data.no === no) {\n  //       return {\n  //         ...data,\n  //         status: DONE,\n  //       };\n  //     }\n  //     return data;\n  //   });\n  //   setTasks(doneList);\n  // };\n\n  const doneTask = (no) => {\n    const doneList = tasks.map((data) => {\n      if (data.no === no) {\n        data.status = DONE;\n      }\n      return data;\n    });\n    setTasks(doneList)\n  };\n\n  return (\n    <Div>\n      <Header />\n      <FormArea addTaskList={addTaskList} />\n      <TaskList tasks={tasks} doneTask={doneTask} />\n    </Div>\n  );\n}\n\nconst DivFlex = styled.div`\n  display: flex;\n`;\n\nconst DivFlexColumn = styled(DivFlex)`\n  flex-direction: column;\n  padding: 8px 4px;\n`;\n\nconst Card = styled(DivFlexColumn)`\n  border: 1px solid #ddd;\n  width: 300px;\n  margin: 8px auto;\n`;\n\nconst Div = styled.div`\n  margin: 8px auto;\n  width: 316px;\n`;\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}